import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.MatteBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.Map;

public class HtmlBorderManagerPanel extends ConfigurationItemPanel {

    private HtmlBorderManagerItem _item;
    private final JTextField _rowInput = new JTextField(5);
    private final JTextField _colInput = new JTextField(5);
    private final JButton _createButton = new JButton("Create Table");
    private final JButton _clearButton = new JButton("Clear Borders");
    private final JButton _resetButton = new JButton("Reset");
    private final JCheckBox _groupingSeparatorCheckbox = new JCheckBox("Add Grouping Separator");

    private JTable _table;
    private final JPanel _tablePanel = new JPanel(new BorderLayout());
    private Map<Point, MatteBorder> _cellBorders = new HashMap<>();
    private MatteBorder _copiedBorder = null;

    private Map<Integer, String> _rowHeaders = new HashMap<>();
    private Map<Integer, String> _columnHeaders = new HashMap<>();

    HtmlBorderManagerPanel() {
        JPanel controlPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));
        controlPanel.setBorder(new EmptyBorder(15, 15, 15, 15));
        controlPanel.setBackground(new Color(245, 247, 250));

        JLabel rowLabel = new JLabel("Rows:");
        JLabel colLabel = new JLabel("Columns:");

        styleLabel(rowLabel);
        styleLabel(colLabel);
        styleButton(_createButton);
        styleButton(_clearButton);
        styleButton(_resetButton);
        styleTextField(_rowInput);
        styleTextField(_colInput);

        controlPanel.add(rowLabel);
        controlPanel.add(_rowInput);
        controlPanel.add(colLabel);
        controlPanel.add(_colInput);
        controlPanel.add(_createButton);
        controlPanel.add(_clearButton);
        controlPanel.add(_resetButton);

        setLayout(new BorderLayout(10, 10));
        add(controlPanel, BorderLayout.NORTH);
        add(_tablePanel, BorderLayout.CENTER);

        _createButton.addActionListener(e -> createTableComponent());
        _clearButton.addActionListener(e -> clearBorders());
        _resetButton.addActionListener(e -> reset());
    }

    private void clearBorders() {
        _cellBorders.clear();
        if (_table != null) _table.repaint();
    }

    private void reset() {
        _cellBorders.clear();
        _rowHeaders.clear();
        _columnHeaders.clear();
        _rowInput.setText("");
        _colInput.setText("");
        _groupingSeparatorCheckbox.setSelected(false);
        _tablePanel.removeAll();
        _tablePanel.revalidate();
        _tablePanel.repaint();
    }

    private void createTableComponent() {
        int rows, cols;
        try {
            rows = Integer.parseInt(_rowInput.getText());
            cols = Integer.parseInt(_colInput.getText());
            if (rows <= 0 || cols <= 0) throw new NumberFormatException();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Please enter valid positive integers!");
            return;
        }
        _cellBorders.clear();
        createTable(rows, cols);
    }

    private void createTableFromItem(int rows, int cols, Map<Point, MatteBorder> cellBorders) {
        _rowInput.setText(String.valueOf(rows));
        _colInput.setText(String.valueOf(cols));
        _cellBorders = new HashMap<>(cellBorders);
        createTable(rows, cols);
    }

    private void createTable(int rows, int cols) {
        _tablePanel.removeAll();
        DefaultTableModel model = new DefaultTableModel(rows + 1, cols) {
            @Override
            public boolean isCellEditable(int row, int col) {
                return row == 0 || col == 0; // Only row 0 (column headers) or column 0 (row headers)
            }
        };
        _table = new JTable(model);
        _table.setCellSelectionEnabled(true);
        _table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        _table.setTableHeader(null);

        // Initialize column headers
        for (int i = 0; i < cols; i++) {
            String header = "Header " + (i + 1);
            model.setValueAt(header, 0, i);
            _columnHeaders.put(i, header);
        }

        // Initialize row headers
        for (int r = 1; r < rows + 1; r++) {
            String header = "Row " + r;
            model.setValueAt(header, r, 0);
            _rowHeaders.put(r - 1, header);
        }

        // Listen for header edits
        model.addTableModelListener(e -> {
            int row = e.getFirstRow();
            int col = e.getColumn();
            if (row == 0) {
                _columnHeaders.put(col, (String) model.getValueAt(row, col));
            } else if (col == 0) {
                _rowHeaders.put(row - 1, (String) model.getValueAt(row, col));
            }
        });

        // Cell renderer
        _table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                           boolean hasFocus, int row, int column) {
                JLabel c = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                c.setHorizontalAlignment(CENTER);
                if (row == 0) {
                    c.setBackground(new Color(220, 230, 240));
                    c.setFont(new Font("Segoe UI", Font.BOLD, 14));
                } else {
                    c.setBackground(isSelected ? new Color(220, 235, 255) : Color.WHITE);
                    c.setFont(new Font("Segoe UI", Font.PLAIN, 14));
                }
                c.setForeground(Color.DARK_GRAY);
                int storageRow = row - 1;
                MatteBorder b = _cellBorders.getOrDefault(new Point(storageRow, column),
                        new MatteBorder(0, 0, 0, 0, Color.GRAY));
                c.setBorder(b);
                return c;
            }
        });

        // Context menu with add row/column dynamically
        _table.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) { if (e.isPopupTrigger()) showPopup(e); }
            public void mouseReleased(MouseEvent e) { if (e.isPopupTrigger()) showPopup(e); }

            private void showPopup(MouseEvent e) {
                int row = _table.rowAtPoint(e.getPoint());
                int col = _table.columnAtPoint(e.getPoint());
                if (row < 0 || col < 0) return;

                JPopupMenu menu = new JPopupMenu();

                // Add Row/Column options
                if (row == 0) {
                    JMenuItem addCol = new JMenuItem("Add Column");
                    addCol.addActionListener(ae -> insertColumn(col + 1));
                    menu.add(addCol);
                } else if (col == 0) {
                    JMenuItem addRow = new JMenuItem("Add Row");
                    addRow.addActionListener(ae -> insertRow(row));
                    menu.add(addRow);
                }

                // Existing border options
                JMenuItem editBorders = new JMenuItem("Edit Borders");
                editBorders.addActionListener(x -> editBorders());
                menu.add(editBorders);

                JMenuItem copyBorders = new JMenuItem("Copy Borders");
                copyBorders.addActionListener(x -> copyBorders());
                menu.add(copyBorders);

                JMenuItem pasteBorders = new JMenuItem("Paste Borders");
                pasteBorders.addActionListener(x -> pasteBorders());
                menu.add(pasteBorders);

                menu.show(_table, e.getX(), e.getY());
            }
        });

        JScrollPane scrollPane = new JScrollPane(_table);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        bottomPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        bottomPanel.setBackground(new Color(245, 247, 250));
        styleCheckbox(_groupingSeparatorCheckbox);
        bottomPanel.add(_groupingSeparatorCheckbox);

        _tablePanel.add(scrollPane, BorderLayout.CENTER);
        _tablePanel.add(bottomPanel, BorderLayout.SOUTH);
        _tablePanel.revalidate();
        _tablePanel.repaint();
    }

    private void insertRow(int rowIndex) {
        DefaultTableModel model = (DefaultTableModel) _table.getModel();
        int cols = model.getColumnCount();
        Object[] newRow = new Object[cols];
        newRow[0] = "Row " + rowIndex;
        for (int i = 1; i < cols; i++) newRow[i] = "";
        model.insertRow(rowIndex, newRow);

        // Shift borders
        Map<Point, MatteBorder> newBorders = new HashMap<>();
        for (Map.Entry<Point, MatteBorder> entry : _cellBorders.entrySet()) {
            Point p = entry.getKey();
            if (p.x >= rowIndex - 1) newBorders.put(new Point(p.x + 1, p.y), entry.getValue());
            else newBorders.put(p, entry.getValue());
        }
        _cellBorders = newBorders;
        _table.repaint();
    }

    private void insertColumn(int colIndex) {
        DefaultTableModel model = (DefaultTableModel) _table.getModel();
        int rows = model.getRowCount();
        model.setColumnCount(model.getColumnCount() + 1);

        for (int r = 0; r < rows; r++) {
            for (int c = model.getColumnCount() - 2; c >= colIndex; c--) {
                model.setValueAt(model.getValueAt(r, c), r, c + 1);
            }
            model.setValueAt((r == 0 ? "Header " + colIndex : ""), r, colIndex);
        }

        // Shift borders
        Map<Point, MatteBorder> newBorders = new HashMap<>();
        for (Map.Entry<Point, MatteBorder> entry : _cellBorders.entrySet()) {
            Point p = entry.getKey();
            if (p.y >= colIndex) newBorders.put(new Point(p.x, p.y + 1), entry.getValue());
            else newBorders.put(p, entry.getValue());
        }
        _cellBorders = newBorders;
        _table.repaint();
    }

    // ---------------------- Styles, Border functions, and Config -----------------------
    private void editBorders() { /* same as original */ }
    private void copyBorders() { /* same as original */ }
    private void pasteBorders() { /* same as original */ }
    private void styleLabel(JLabel jLabel) { /* same as original */ }
    private void styleTextField(JTextField field) { /* same as original */ }
    private void styleButton(JButton button) { /* same as original */ }
    private void styleCheckbox(JCheckBox checkbox) { /* same as original */ }

    @Override
    public void refreshConfiguration(Object item) {
        if (!(item instanceof HtmlBorderManagerItem)) return;
        _item = (HtmlBorderManagerItem) item;
        _groupingSeparatorCheckbox.setSelected(_item.isGroupingSeparatorEnabled());
        createTableFromItem(_item.getRowNumber(), _item.getColumnNumber(), _item.getCellBorders());
    }

    @Override
    public ConfigurationItem apply(String name, boolean createNew) {
        if (_item == null || createNew) _item = new HtmlBorderManagerItem(name);
        _item.setRowNumber(_table.getRowCount() - 1);
        _item.setColumnNumber(_table.getColumnCount());
        _item.setCellBorders(_cellBorders);
        _item.setGroupingSeparatorEnabled(_groupingSeparatorCheckbox.isSelected());
        return _item;
    }

    public static void registerFactory() {
        final ConfigurationItemPanelDirectory.Factory<HtmlBorderManagerItem> factory = new ConfigurationItemPanelDirectory.Factory<>() {
            @Override
            public HtmlBorderManagerPanel makeInstance() { return new HtmlBorderManagerPanel(); }
            @Override
            public Class<HtmlBorderManagerItem> getItemClass() { return HtmlBorderManagerItem.class; }
            @Override
            public String getDisplayName() { return HtmlBorderManagerItem.NAME; }
        };
        ConfigurationItemPanelDirectory.getInstance().registerPanel(HtmlBorderManagerItem.ENTITY_KIND, factory);
    }
}
